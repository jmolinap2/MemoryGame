---
import Layout from '../layouts/Layout.astro';
---

<Layout title="Juego de Memoria">
  <a href="/" class="back-to-menu">&#8592; Volver al Menú Principal</a>
  <h1>Juego de Memoria</h1>
  <div class="game-info">
    <p>Movimientos: <span id="moves-count">0</span></p>
    <p>Tiempo: <span id="timer">00:00</span></p>
  </div>
  <div class="memory-game-grid" id="memory-game-grid">
    <!-- Cards will be rendered by client-side JavaScript -->
  </div>
  <button id="restart-memory-game">Reiniciar Juego</button>
</Layout>

<style>
  .game-info {
    display: flex;
    justify-content: space-around;
    width: 420px;
    margin: 20px auto;
    font-size: 1.2em;
    color: var(--text-color);
  }

  .memory-game-grid {
    display: grid;
    grid-template-columns: repeat(4, 100px);
    grid-template-rows: repeat(4, 100px);
    gap: 15px;
    perspective: 1000px;
    padding: 20px;
    background-color: var(--board-background-color);
    border-radius: 15px;
    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);
  }

  .card {
    width: 100px;
    height: 100px;
    position: relative;
    transform-style: preserve-3d;
    transition: transform 0.6s cubic-bezier(0.4, 0.0, 0.2, 1), box-shadow 0.3s ease; /* Added box-shadow transition */
    cursor: pointer;
    border-radius: 10px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  }

  .card:hover:not(.flipped):not(.matched) {
    transform: scale(1.05); /* Subtle zoom on hover */
    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2), 0 0 15px var(--primary-color); /* Enhanced shadow and glow */
  }

  .card.flipped .card-inner {
    transform: rotateY(180deg);
  }

  .card.matched .card-inner {
    opacity: 0.6;
    cursor: default;
    transform: scale(0.95);
  }

  .card-inner {
    width: 100%;
    height: 100%;
    position: absolute;
    transform-style: preserve-3d;
    transition: transform 0.6s cubic-bezier(0.4, 0.0, 0.2, 1);
    border-radius: 10px;
  }

  .card-front, .card-back {
    width: 100%;
    height: 100%;
    position: absolute;
    backface-visibility: hidden; /* Crucial for flip effect */
    display: flex;
    justify-content: center;
    align-items: center;
    font-size: 2.5em;
    border-radius: 10px;
    box-sizing: border-box;
    border: 3px solid var(--primary-color);
  }

  .card-front {
    background-color: var(--card-front-color);
    color: var(--background-color); /* Ensure front text is visible on front color */
  }

  .card-back {
    background-color: var(--card-back-color);
    color: var(--text-color); /* Ensure back text is visible on back color */
    transform: rotateY(180deg); /* Initially rotated for backface */
  }

  #restart-memory-game {
    margin-top: 30px;
  }
</style>

<script is:inline>
  const cardValues = [
    '🍎', '🍌', '🍒', '🍇', '🍋', '🍊', '🍓', '🍉',
    '🍕', '🍔', '🍟', '🍦', '🍩', '🍪', '🍫', '🍬'
  ];
  let cards = [];
  let flippedCards = [];
  let matchesFound = 0;
  let lockBoard = false;
  let moves = 0;
  let timerInterval;
  let startTime;

  const movesCountDisplay = document.getElementById('moves-count');
  const timerDisplay = document.getElementById('timer');
  const restartButton = document.getElementById('restart-memory-game');

  function initializeGame() {
    const gameCardValues = cardValues.slice(0, 8); // Use first 8 for 4x4 grid
    const duplicatedValues = [...gameCardValues, ...gameCardValues];
    cards = duplicatedValues
      .map((value, index) => ({ id: index, value, flipped: false, matched: false }))
      .sort(() => Math.random() - 0.5);
    
    flippedCards = [];
    matchesFound = 0;
    lockBoard = false;
    moves = 0;
    movesCountDisplay.textContent = moves;
    clearInterval(timerInterval);
    timerDisplay.textContent = '00:00';
    startTime = null;

    renderCards();
  }

  function renderCards() {
    const gameGrid = document.getElementById('memory-game-grid');
    gameGrid.innerHTML = '';

    cards.forEach(card => {
      const cardElement = document.createElement('div');
      cardElement.classList.add('card');
      // Only add 'flipped' or 'matched' classes if the card state dictates it
      if (card.flipped) {
        cardElement.classList.add('flipped');
      }
      if (card.matched) {
        cardElement.classList.add('matched');
      }
      cardElement.dataset.cardId = card.id;
      cardElement.dataset.cardValue = card.value;

      cardElement.innerHTML = `
        <div class="card-inner">
          <div class="card-front"></div>
          <div class="card-back">${card.value}</div>
        </div>
      `;
      cardElement.addEventListener('click', () => handleCardClick(card.id));
      gameGrid.appendChild(cardElement);
    });
  }

  function startTimer() {
    startTime = new Date().getTime();
    timerInterval = setInterval(() => {
      const now = new Date().getTime();
      const distance = now - startTime;
      const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
      const seconds = Math.floor((distance % (1000 * 60)) / 1000);
      timerDisplay.textContent = 
        `${minutes < 10 ? '0' + minutes : minutes}:${seconds < 10 ? '0' + seconds : seconds}`;
    }, 1000);
  }

  function stopTimer() {
    clearInterval(timerInterval);
  }

  function handleCardClick(cardId) {
    if (lockBoard) return;

    if (!startTime) {
      startTimer();
    }

    const clickedCardIndex = cards.findIndex(card => card.id === cardId);
    const clickedCard = cards[clickedCardIndex];

    if (clickedCard.flipped || clickedCard.matched) {
      return;
    }

    cards[clickedCardIndex].flipped = true;
    flippedCards.push(clickedCard);
    renderCards();

    moves++;
    movesCountDisplay.textContent = moves;

    if (flippedCards.length === 2) {
      lockBoard = true;
      const [card1, card2] = flippedCards;

      if (card1.value === card2.value) {
        cards = cards.map(card => 
          card.value === card1.value ? { ...card, matched: true } : card
        );
        matchesFound++;
        flippedCards = [];
        lockBoard = false;
        renderCards();
      } else {
        setTimeout(() => {
          cards = cards.map(card => 
            (card.id === card1.id || card.id === card2.id) ? { ...card, flipped: false } : card
          );
          flippedCards = [];
          lockBoard = false;
          renderCards();
        }, 1000);
      }
    }

    if (matchesFound === gameCardValues.length) {
      stopTimer();
      setTimeout(() => {
        alert(`¡Felicidades! Has ganado el juego de memoria en ${moves} movimientos y ${timerDisplay.textContent} segundos.`);
      }, 500);
    }
  }

  restartButton.addEventListener('click', initializeGame);

  initializeGame();
</script>