---
import Layout from '../layouts/Layout.astro';
---

<Layout title="Tic-Tac-Toe">
  <h1>Tic-Tac-Toe</h1>
  <div class="game-board" id="game-board">
    <div class="cell" data-cell-index="0"></div>
    <div class="cell" data-cell-index="1"></div>
    <div class="cell" data-cell-index="2"></div>
    <div class="cell" data-cell-index="3"></div>
    <div class="cell" data-cell-index="4"></div>
    <div class="cell" data-cell-index="5"></div>
    <div class="cell" data-cell-index="6"></div>
    <div class="cell" data-cell-index="7"></div>
    <div class="cell" data-cell-index="8"></div>
  </div>
  <button id="restart-button">Reiniciar Juego</button>
  <div id="game-status"></div>
</Layout>

<style>
  .game-board {
    display: grid;
    grid-template-columns: repeat(3, 100px);
    grid-template-rows: repeat(3, 100px);
    gap: 5px;
    width: 315px;
    height: 315px;
    background-color: var(--board-background-color);
    margin: 20px auto;
  }

  .cell {
    width: 100px;
    height: 100px;
    background-color: var(--card-back-color);
    display: flex;
    justify-content: center;
    align-items: center;
    font-size: 3em;
    font-weight: bold;
    cursor: pointer;
    color: var(--text-color);
  }

  .cell.x {
    color: var(--x-color);
  }

  .cell.o {
    color: var(--o-color);
  }

  #restart-button {
    display: block;
    margin: 20px auto;
    padding: 10px 20px;
    font-size: 1em;
    cursor: pointer;
  }

  #game-status {
    text-align: center;
    font-size: 1.5em;
    margin-top: 10px;
  }
</style>

<script is:inline>
  const cells = document.querySelectorAll('.cell');
  const restartButton = document.getElementById('restart-button');
  const gameStatus = document.getElementById('game-status');

  let currentPlayer = 'X';
  let board = ['', '', '', '', '', '', '', '', ''];
  let gameActive = true;

  const winningConditions = [
    [0, 1, 2],
    [3, 4, 5],
    [6, 7, 8],
    [0, 3, 6],
    [1, 4, 7],
    [2, 5, 8],
    [0, 4, 8],
    [2, 4, 6]
  ];

  function handleCellClick(event) {
    const clickedCell = event.target;
    const clickedCellIndex = parseInt(clickedCell.dataset.cellIndex);

    if (board[clickedCellIndex] !== '' || !gameActive) {
      return;
    }

    board[clickedCellIndex] = currentPlayer;
    clickedCell.textContent = currentPlayer;
    clickedCell.classList.add(currentPlayer.toLowerCase());

    checkResult();
  }

  function checkResult() {
    let roundWon = false;
    for (let i = 0; i < winningConditions.length; i++) {
      const winCondition = winningConditions[i];
      let a = board[winCondition[0]];
      let b = board[winCondition[1]];
      let c = board[winCondition[2]];
      if (a === '' || b === '' || c === '') {
        continue;
      }
      if (a === b && b === c) {
        roundWon = true;
        break;
      }
    }

    if (roundWon) {
      gameStatus.textContent = `¡Jugador ${currentPlayer} ha ganado!`;
      gameActive = false;
      return;
    }

    let roundDraw = !board.includes('');
    if (roundDraw) {
      gameStatus.textContent = '¡Empate!';
      gameActive = false;
      return;
    }

    currentPlayer = currentPlayer === 'X' ? 'O' : 'X';
    gameStatus.textContent = `Turno de ${currentPlayer}`;
  }

  function restartGame() {
    currentPlayer = 'X';
    board = ['', '', '', '', '', '', '', '', ''];
    gameActive = true;
    gameStatus.textContent = `Turno de ${currentPlayer}`;
    cells.forEach(cell => {
      cell.textContent = '';
      cell.classList.remove('x', 'o');
    });
  }

  cells.forEach(cell => cell.addEventListener('click', handleCellClick));
  restartButton.addEventListener('click', restartGame);

  gameStatus.textContent = `Turno de ${currentPlayer}`;
</script>